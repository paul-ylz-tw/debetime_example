ARG PG_MAJOR=11
FROM debezium/postgres:$PG_MAJOR as debezium

# FROM postgres:10.5-alpine AS wal2jsonbuilder
# RUN apk add --no-cache build-base git
# RUN git clone https://github.com/eulerto/wal2json.git
# WORKDIR wal2json
# RUN USE_PGXS=1 make && make install

FROM timescale/timescaledb:latest-pg$PG_MAJOR
# install debezium dependencies
COPY --from=debezium /usr/lib/postgresql/$PG_MAJOR/lib/decoderbufs.so /usr/local/lib/postgresql/
COPY --from=debezium /usr/share/postgresql/$PG_MAJOR/extension/decoderbufs.control /usr/local/share/postgresql/extension/
# COPY --from=wal2jsonbuilder /wal2json/wal2json.so /usr/local/lib/postgresql/

# build wal2json for debezium
ENV PLUGIN_VERSION=v1.5.0.Beta1
ENV WAL2JSON_COMMIT_ID=wal2json_2_3
RUN apk add --no-cache protobuf-c-dev
RUN apk add --no-cache --virtual .debezium-build-deps gcc clang llvm git make musl-dev pkgconf \
    && git clone https://github.com/debezium/postgres-decoderbufs -b $PLUGIN_VERSION --single-branch \
    && (cd /postgres-decoderbufs && make && make install) \
    && rm -rf postgres-decoderbufs \
    && git clone https://github.com/eulerto/wal2json -b master --single-branch \
    && (cd /wal2json && git checkout $WAL2JSON_COMMIT_ID && make && make install) \
    && rm -rf wal2json \
    && apk del .debezium-build-deps

# add postgis for debezium's example data
# https://github.com/postgis/docker-postgis/blob/master/11-2.5/alpine/Dockerfile
ENV POSTGIS_VERSION 2.5.5
ENV POSTGIS_SHA256 24b15ee36f3af02015da0e92a18f9046ea0b4fd24896196c8e6c2aa8e4b56baa

RUN set -ex \
    \
    && apk add --no-cache --virtual .fetch-deps \
        ca-certificates \
        openssl \
        tar \
    \
    && wget -O postgis.tar.gz "https://github.com/postgis/postgis/archive/$POSTGIS_VERSION.tar.gz" \
    && echo "$POSTGIS_SHA256 *postgis.tar.gz" | sha256sum -c - \
    && mkdir -p /usr/src/postgis \
    && tar \
        --extract \
        --file postgis.tar.gz \
        --directory /usr/src/postgis \
        --strip-components 1 \
    && rm postgis.tar.gz \
    \
    && apk add --no-cache --virtual .build-deps \
        autoconf \
        automake \
        file \
        json-c-dev \
        libtool \
        libxml2-dev \
        make \
        perl \
        clang-dev \
        g++ \
        gcc \
        gdal-dev \
        geos-dev \
        llvm10-dev \
        proj-dev \
        protobuf-c-dev \
        pcre-dev \
    && cd /usr/src/postgis \
    && ./autogen.sh \
# configure options taken from:
# https://anonscm.debian.org/cgit/pkg-grass/postgis.git/tree/debian/rules?h=jessie
    && ./configure \
#       --with-gui \
        --with-pcredir="$(pcre-config --prefix)" \
    && make -j$(nproc) \
    && make install \
# regress check
    && mkdir /tempdb \
    && chown -R postgres:postgres /tempdb \
    && su postgres -c 'pg_ctl -D /tempdb init' \
    && su postgres -c 'pg_ctl -D /tempdb start' \
    && cd regress \
    && make -j$(nproc) check RUNTESTFLAGS=--extension PGUSER=postgres \
    && su postgres -c 'pg_ctl -D /tempdb --mode=immediate stop' \
    && rm -rf /tempdb \
    && rm -rf /tmp/pgis_reg \
# add .postgis-rundeps
    && apk add --no-cache --virtual .postgis-rundeps \
        json-c \
        geos \
        gdal \
        proj \
        pcre \
        libstdc++ \
        protobuf-c \
# clean
    && cd / \
    && rm -rf /usr/src/postgis \
    && apk del .fetch-deps .build-deps


# postgres config is generated by scripts within
COPY /docker-entrypoint-initdb.d/* /docker-entrypoint-initdb.d/

